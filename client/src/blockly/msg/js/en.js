// This file was automatically generated.  Do not modify.

'use strict';

Blockly.Msg["ADD_COMMENT"] = "Add Comment";
Blockly.Msg["AUTH"] = "Please authorize this app to enable your work to be saved and to allow it to be shared by you.";
Blockly.Msg["CHANGE_VALUE_TITLE"] = "Change value:";
Blockly.Msg["CHAT"] = "Chat with your collaborator by typing in this box!";
Blockly.Msg["CLEAN_UP"] = "Clean up Blocks";
Blockly.Msg["CLICK_ADD_TOOLTIP"] = "Add an element";
Blockly.Msg["CLICK_REMOVE_TOOLTIP"] = "Remove this element";
Blockly.Msg["COLLAPSE_ALL"] = "Collapse Blocks";
Blockly.Msg["COLLAPSE_BLOCK"] = "Collapse Block";
Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "colour 1";
Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "colour 2";
Blockly.Msg["COLOUR_BLEND_HELPURL"] = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg["COLOUR_BLEND_RATIO"] = "ratio";
Blockly.Msg["COLOUR_BLEND_TITLE"] = "blend";
Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "Blends two colours together with a given ratio (0.0 - 1.0).";
Blockly.Msg["COLOUR_BLEND_TYPEBLOCK"] = "Blend Colour";
Blockly.Msg["COLOUR_HEX"] = "hex";
Blockly.Msg["COLOUR_HEX_TO_DECIMAL_TYPEBLOCK"] = "to decimal";
Blockly.Msg["COLOUR_PICKER_HELPURL"] = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "Choose a colour from the palette.";
Blockly.Msg["COLOUR_PICKER_TYPEBLOCK"] = "Choose Colour";
Blockly.Msg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";
Blockly.Msg["COLOUR_RANDOM_TITLE"] = "random colour";
Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "Choose a colour at random.";
Blockly.Msg["COLOUR_RANDOM_TYPEBLOCK"] = "Random Colour";
Blockly.Msg["COLOUR_RGB_BLUE"] = "blue";
Blockly.Msg["COLOUR_RGB_GREEN"] = "green";
Blockly.Msg["COLOUR_RGB_HELPURL"] = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg["COLOUR_RGB_RED"] = "red";
Blockly.Msg["COLOUR_RGB_TITLE"] = "colour with";
Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";
Blockly.Msg["COLOUR_RGB_TYPEBLOCK"] = "Colour with";
Blockly.Msg["COLOUR_TO_DECIMAL_BLOCK_TITLE"] = "to decimal";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_BREAK_TYPEBLOCK"] = "Break Loop";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_CONTINUE_TYPEBLOCK"] = "Continue Loop";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "break out of loop";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "continue with next iteration of loop";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Break out of the containing loop.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Skip the rest of this loop, and continue with the next iteration.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Warning: This block may only be used within a loop.";
Blockly.Msg["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";
Blockly.Msg["CONTROLS_FOREACH_KEY_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";
Blockly.Msg["CONTROLS_FOREACH_KEY_TITLE"] = "for each key %1 in map %2";
Blockly.Msg["CONTROLS_FOREACH_KEY_TYPEBLOCK"] = "For Each Key In Map";
Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "for each item %1 in list %2";
Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
Blockly.Msg["CONTROLS_FOREACH_TYPEBLOCK"] = "For Each Item In List";
Blockly.Msg["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg["CONTROLS_FOR_TITLE"] = "count with %1 from %2 to %3 by %4";
Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
Blockly.Msg["CONTROLS_FOR_TYPEBLOCK"] = "Count With From To By";
Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Add a condition to the if block.";
Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "Add a final, catch-all condition to the if block.";
Blockly.Msg["CONTROLS_IF_ELSE_TYPEBLOCK"] = "If Else";
Blockly.Msg["CONTROLS_IF_ELSIF_ELSE_TYPEBLOCK"] = "If Else If Else";
Blockly.Msg["CONTROLS_IF_ELSIF_TYPEBLOCK"] = "If Else If";
Blockly.Msg["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this if block.";
Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "else";
Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "else if";
Blockly.Msg["CONTROLS_IF_MSG_IF"] = "if";
Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "If a value is true, then do some statements.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
Blockly.Msg["CONTROLS_IF_TYPEBLOCK"] = "If";
Blockly.Msg["CONTROLS_REPEAT_HELPURL"] = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"] = "do";
Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "repeat %1 times";
Blockly.Msg["CONTROLS_REPEAT_TITLE_REPEAT"] = "repeat";
Blockly.Msg["CONTROLS_REPEAT_TITLE_TIMES"] = "times";
Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "Do some statements several times.";
Blockly.Msg["CONTROLS_REPEAT_TYPEBLOCK"] = "Repeat Times";
Blockly.Msg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "repeat until";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "repeat while";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "While a value is false, then do some statements.";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "While a value is true, then do some statements.";
Blockly.Msg["CONTROLS_WHILEUNTIL_UNTIL_TYPEBLOCK"] = "Repeat Unitl";
Blockly.Msg["CONTROLS_WHILEUNTIL_WHILE_TYPEBLOCK"] = "Repeat While";
Blockly.Msg["DELETE_ALL_BLOCKS"] = "Delete All Blocks";
Blockly.Msg["DELETE_BLOCK"] = "Delete Block";
Blockly.Msg["DELETE_X_BLOCKS"] = "Delete %1 Blocks";
Blockly.Msg["DISABLE_BLOCK"] = "Disable Block";
Blockly.Msg["DUPLICATE_BLOCK"] = "Duplicate";
Blockly.Msg["ENABLE_BLOCK"] = "Enable Block";
Blockly.Msg["EXPAND_ALL"] = "Expand Blocks";
Blockly.Msg["EXPAND_BLOCK"] = "Expand Block";
Blockly.Msg["EXTERNAL_INPUTS"] = "External Inputs";
Blockly.Msg["HELP"] = "Help";
Blockly.Msg["IMPORT_JAR"] = "import jar %1 %2 package %3 class %4 method %5 %6";
Blockly.Msg["IMPORT_JAR_GET"] = "Create 'get %1'";
Blockly.Msg["IMPORT_JAR_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg["IMPORT_JAR_TOOLTIP"] = "Sets this variable to be equal to the input.";
Blockly.Msg["IMPORT_JAR_TYPEBLOCK"] = "insert python code";
Blockly.Msg["INITIALIZE_GLOBAL_VARIABLE"] = "Initialize global";
Blockly.Msg["INITIALIZE_LOCAL_VARIABLE"] = "Initialize local";
Blockly.Msg["INITIALIZE_VARIABLE"] = "Initialize %1 as %2 with %3";
Blockly.Msg["INLINE_INPUTS"] = "Inline Inputs";
Blockly.Msg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "create empty list";
Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "Returns a list, of length 0, containing no data records";
Blockly.Msg["LISTS_CREATE_EMPTY_TYPEBLOCK"] = "Create Empty List";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "list";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this list block.";
Blockly.Msg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "create list with";
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Add an item to the list.";
Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "Create a list with any number of items.";
Blockly.Msg["LISTS_CREATE_WITH_TYPEBLOCK"] = "Create List With";
Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "first";
Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "# from end";
Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "#";
Blockly.Msg["LISTS_GET_INDEX_GET"] = "get";
Blockly.Msg["LISTS_GET_INDEX_GET_FIRST_TYPEBLOCK"] = "Get First Item of List";
Blockly.Msg["LISTS_GET_INDEX_GET_FROM_END_TYPEBLOCK"] = "Get Item From End of List";
Blockly.Msg["LISTS_GET_INDEX_GET_FROM_START_TYPEBLOCK"] = "Get Item From Start of List";
Blockly.Msg["LISTS_GET_INDEX_GET_LAST_TYPEBLOCK"] = "Get Last Item of List";
Blockly.Msg["LISTS_GET_INDEX_GET_RANDOM_TYPEBLOCK"] = "Get Random Item of List";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "get and remove";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE_FIRST_TYPEBLOCK"] = "Get and Remove First Item of List";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE_FROM_END_TYPEBLOCK"] = "Get and Remove Item From End of List";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE_FROM_START_TYPEBLOCK"] = "Get and Remove Item From Start of List";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE_LAST_TYPEBLOCK"] = "Get and Remove Last Item of List";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE_RANDOM_TYPEBLOCK"] = "Get and Remove Random Item of List";
Blockly.Msg["LISTS_GET_INDEX_LAST"] = "last";
Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "random";
Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "remove";
Blockly.Msg["LISTS_GET_INDEX_REMOVE_FIRST_TYPEBLOCK"] = "Remove First Item of List";
Blockly.Msg["LISTS_GET_INDEX_REMOVE_FROM_END_TYPEBLOCK"] = "Remove Item From End of List";
Blockly.Msg["LISTS_GET_INDEX_REMOVE_FROM_START_TYPEBLOCK"] = "Remove Item From Start of List";
Blockly.Msg["LISTS_GET_INDEX_REMOVE_LAST_TYPEBLOCK"] = "Remove Last Item of List";
Blockly.Msg["LISTS_GET_INDEX_REMOVE_RANDOM_TYPEBLOCK"] = "Remove Random Item of List";
Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Returns the first item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM_END"] = "Returns the item at the specified position in a list. #1 is the last item.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM_START"] = "Returns the item at the specified position in a list. #1 is the first item.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Returns the last item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Returns a random item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Removes and returns the first item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END"] = "Removes and returns the item at the specified position in a list. #1 is the last item.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START"] = "Removes and returns the item at the specified position in a list. #1 is the first item.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Removes and returns the last item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Removes and returns a random item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Removes the first item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END"] = "Removes the item at the specified position in a list. #1 is the last item.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START"] = "Removes the item at the specified position in a list. #1 is the first item.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Removes the last item in a list.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Removes a random item in a list.";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "to # from end";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "to #";
Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "to last";
Blockly.Msg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "get sub-list from first";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "get sub-list from # from end";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "get sub-list from #";
Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";
Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "Creates a copy of the specified portion of a list.";
Blockly.Msg["LISTS_GET_SUBLIST_TYPEBLOCK"] = "Get Sub-List";
Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "find first occurrence of item";
Blockly.Msg["LISTS_INDEX_OF_FIRST_TYPEBLOCK"] = "Find First Occurrence Of Item";
Blockly.Msg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg["LISTS_INDEX_OF_LAST"] = "find last occurrence of item";
Blockly.Msg["LISTS_INDEX_OF_LAST_TYPEBLOCK"] = "Find Last Occurrence Of Item";
Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "Returns the index of the first/last occurrence of the item in the list. Returns 0 if item is not found.";
Blockly.Msg["LISTS_INLIST"] = "in list";
Blockly.Msg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1 is empty";
Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "Returns true if the list is empty.";
Blockly.Msg["LISTS_ISEMPTY_TYPEBLOCK"] = "Is List Empty?";
Blockly.Msg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg["LISTS_LENGTH_TITLE"] = "length of %1";
Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "Returns the length of a list.";
Blockly.Msg["LISTS_LENGTH_TYPEBLOCK"] = "Length Of List";
Blockly.Msg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_REPEAT_TITLE"] = "create list with item %1 repeated %2 times";
Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "Creates a list consisting of the given value repeated the specified number of times.";
Blockly.Msg["LISTS_REPEAT_TYPEBLOCK"] = "Create List With Repeated Item";
Blockly.Msg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "as";
Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "insert at";
Blockly.Msg["LISTS_SET_INDEX_INSERT_FIRST_TYPEBLOCK"] = "Insert at Start of List";
Blockly.Msg["LISTS_SET_INDEX_INSERT_FROM_END_TYPEBLOCK"] = "Insert at Position from End of List";
Blockly.Msg["LISTS_SET_INDEX_INSERT_FROM_START_TYPEBLOCK"] = "Inserts at Position in List";
Blockly.Msg["LISTS_SET_INDEX_INSERT_LAST_TYPEBLOCK"] = "Append to End of List";
Blockly.Msg["LISTS_SET_INDEX_INSERT_RANDOM_TYPEBLOCK"] = "Insert At Random Location in List";
Blockly.Msg["LISTS_SET_INDEX_SET"] = "set";
Blockly.Msg["LISTS_SET_INDEX_SET_FIRST_TYPEBLOCK"] = "Set First Item in List";
Blockly.Msg["LISTS_SET_INDEX_SET_FROM_END_TYPEBLOCK"] = "Set Item at Position from End of List";
Blockly.Msg["LISTS_SET_INDEX_SET_FROM_START_TYPEBLOCK"] = "Set Item at Position in List";
Blockly.Msg["LISTS_SET_INDEX_SET_LAST_TYPEBLOCK"] = "Set Last Item in List";
Blockly.Msg["LISTS_SET_INDEX_SET_RANDOM_TYPEBLOCK"] = "Set a Random Item in List";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Inserts the item at the start of a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END"] = "Inserts the item at the specified position in a list. #1 is the last item.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START"] = "Inserts the item at the specified position in a list. #1 is the first item.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Append the item to the end of a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Inserts the item randomly in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Sets the first item in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM_END"] = "Sets the item at the specified position in a list. #1 is the last item.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM_START"] = "Sets the item at the specified position in a list. #1 is the first item.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Sets the last item in a list.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Sets a random item in a list.";
Blockly.Msg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "make list from text";
Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT_TYPEBLOCK"] = "Make List From Text";
Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "make text from list";
Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST_TYPEBLOCK"] = "Make Text From List";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "Join a list of texts into one text, separated by a delimiter.";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Split text into a list of texts, breaking at each delimiter.";
Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "with delimiter";
Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "false";
Blockly.Msg["LOGIC_BOOLEAN_FALSE_TYPEBLOCK"] = "False";
Blockly.Msg["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "Returns either true or false.";
Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "true";
Blockly.Msg["LOGIC_BOOLEAN_TRUE_TYPEBLOCK"] = "True";
Blockly.Msg["LOGIC_COMPARE_HELPURL"] = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "Return true if both inputs equal each other.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "Return true if the first input is greater than the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "Return true if the first input is greater than or equal to the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "Return true if the first input is smaller than the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "Return true if the first input is smaller than or equal to the second input.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Return true if both inputs are not equal to each other.";
Blockly.Msg["LOGIC_COMPARE_TYPEBLOCK"] = "Logic Equal";
Blockly.Msg["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg["LOGIC_NEGATE_TITLE"] = "not %1";
Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "Returns true if the input is false. Returns false if the input is true.";
Blockly.Msg["LOGIC_NEGATE_TYPEBLOCK"] = "not";
Blockly.Msg["LOGIC_NULL"] = "null";
Blockly.Msg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "Returns null.";
Blockly.Msg["LOGIC_NULL_TYPEBLOCK"] = "Null";
Blockly.Msg["LOGIC_OPERATION_AND"] = "and";
Blockly.Msg["LOGIC_OPERATION_AND_TYPEBLOCK"] = "and";
Blockly.Msg["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg["LOGIC_OPERATION_OR"] = "or";
Blockly.Msg["LOGIC_OPERATION_OR_TYPEBLOCK"] = "or";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "Return true if both inputs are true.";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "Return true if at least one of the inputs is true.";
Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "test";
Blockly.Msg["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "if false";
Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "if true";
Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
Blockly.Msg["LOGIC_TERNARY_TYPEBLOCK"] = "Test";
Blockly.Msg["LOGIC_THIS"] = "This";
Blockly.Msg["LOGIC_THIS_TYPEBLOCK"] = "This";
Blockly.Msg["MAPS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Maps#create-empty-Map";
Blockly.Msg["MAPS_CREATE_EMPTY_TITLE"] = "create empty map";
Blockly.Msg["MAPS_CREATE_EMPTY_TOOLTIP"] = "Returns a Map, of length 0, containing no data records";
Blockly.Msg["MAPS_CREATE_EMPTY_TYPEBLOCK"] = "Create Empty Map";
Blockly.Msg["MAPS_CREATE_HELPURL"] = "https://github.com/google/blockly/wiki/Maps#create-empty-Map";
Blockly.Msg["MAPS_CREATE_TITLE"] = "map key %1 as %2";
Blockly.Msg["MAPS_CREATE_TOOLTIP"] = "Returns a Map, of length 0, containing no data records";
Blockly.Msg["MAPS_CREATE_TYPEBLOCK"] = "Map Key";
Blockly.Msg["MAPS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "Map";
Blockly.Msg["MAPS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this Map block.";
Blockly.Msg["MAPS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Maps#create-Map-with";
Blockly.Msg["MAPS_CREATE_WITH_INPUT_WITH"] = "create map with";
Blockly.Msg["MAPS_CREATE_WITH_ITEM_TOOLTIP"] = "Add an item to the Map.";
Blockly.Msg["MAPS_CREATE_WITH_TOOLTIP"] = "Create a Map with any number of items.";
Blockly.Msg["MAPS_CREATE_WITH_TYPEBLOCK"] = "Create Map With";
Blockly.Msg["MAPS_GET_INDEX_FIRST"] = "first";
Blockly.Msg["MAPS_GET_INDEX_FROM_END"] = "# from end";
Blockly.Msg["MAPS_GET_INDEX_FROM_START"] = "#";
Blockly.Msg["MAPS_GET_INDEX_GET"] = "get";
Blockly.Msg["MAPS_GET_INDEX_GET_REMOVE"] = "get and remove";
Blockly.Msg["MAPS_GET_INDEX_GET_REMOVE_TYPEBLOCK"] = "Get and Remove Item From a Map";
Blockly.Msg["MAPS_GET_INDEX_GET_TYPEBLOCK"] = "Get Item From a Map";
Blockly.Msg["MAPS_GET_INDEX_LAST"] = "last";
Blockly.Msg["MAPS_GET_INDEX_REMOVE"] = "remove";
Blockly.Msg["MAPS_GET_INDEX_REMOVE_TYPEBLOCK"] = "Remove Item From a Map";
Blockly.Msg["MAPS_GET_INDEX_TAIL"] = "";
Blockly.Msg["MAPS_GET_INDEX_TOOLTIP_GET"] = "Returns the item at the specified position in a Map.";
Blockly.Msg["MAPS_GET_INDEX_TOOLTIP_GET_REMOVE"] = "Removes and returns the item at the specified position in a Map.";
Blockly.Msg["MAPS_GET_INDEX_TOOLTIP_REMOVE"] = "Removes the item at the specified position in a Map.";
Blockly.Msg["MAPS_INDEX_OF_FIRST"] = "find first occurrence of item";
Blockly.Msg["MAPS_INDEX_OF_FIRST_TYPEBLOCK"] = "Find First Occurrence Of Item";
Blockly.Msg["MAPS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Maps#getting-items-from-a-Map";
Blockly.Msg["MAPS_INDEX_OF_LAST"] = "find last occurrence of item";
Blockly.Msg["MAPS_INDEX_OF_LAST_TYPEBLOCK"] = "Find Last Occurrence Of Item";
Blockly.Msg["MAPS_INDEX_OF_TOOLTIP"] = "Returns the index of the first/last occurrence of the item in the Map. Returns 0 if text is not found.";
Blockly.Msg["MAPS_INMAP"] = "in map";
Blockly.Msg["MAPS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Maps#is-empty";
Blockly.Msg["MAPS_ISEMPTY_TITLE"] = "%1 is empty";
Blockly.Msg["MAPS_ISEMPTY_TOOLTIP"] = "Returns true if the Map is empty.";
Blockly.Msg["MAPS_ISEMPTY_TYPEBLOCK"] = "Is Map Empty?";
Blockly.Msg["MAPS_KEYS_TITLE"] = "get keys of %1";
Blockly.Msg["MAPS_KEYS_TYPEBLOCK"] = "Get Keys of Map";
Blockly.Msg["MAPS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Maps#length-of";
Blockly.Msg["MAPS_LENGTH_TITLE"] = "size of %1";
Blockly.Msg["MAPS_LENGTH_TOOLTIP"] = "Returns the number of entries in a Map.";
Blockly.Msg["MAPS_LENGTH_TYPEBLOCK"] = "Size Of Map";
Blockly.Msg["MAPS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Maps#in-Map--set";
Blockly.Msg["MAPS_SET_INDEX_INPUT_TO"] = "as";
Blockly.Msg["MAPS_SET_INDEX_INSERT"] = "insert at";
Blockly.Msg["MAPS_SET_INDEX_SET"] = "set";
Blockly.Msg["MAPS_SET_INDEX_TOOLTIP"] = "Sets the item at the specified position in a Map.";
Blockly.Msg["MAPS_SET_INDEX_TYPEBLOCK"] = "Set Item at Position in Map";
Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";
Blockly.Msg["MATH_ARITHMETIC_ADD_TYPEBLOCK"] = "+";
Blockly.Msg["MATH_ARITHMETIC_DIVIDE_TYPEBLOCK"] = "/";
Blockly.Msg["MATH_ARITHMETIC_HELPURL"] = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg["MATH_ARITHMETIC_MINUS_TYPEBLOCK"] = "-";
Blockly.Msg["MATH_ARITHMETIC_MULTIPLY_TYPEBLOCK"] = "*";
Blockly.Msg["MATH_ARITHMETIC_POWER_TYPEBLOCK"] = "^";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Return the sum of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Return the quotient of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Return the difference of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Return the product of the two numbers.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Return the first number raised to the power of the second number.";
Blockly.Msg["MATH_CHANGE_HELPURL"] = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg["MATH_CHANGE_TITLE"] = "change %1 by %2";
Blockly.Msg["MATH_CHANGE_TOOLTIP"] = "Add a number to variable '%1'.";
Blockly.Msg["MATH_CHANGE_TYPEBLOCK"] = "Change Variable By Amount";
Blockly.Msg["MATH_CONSTANT_E_TYPEBLOCK"] = "Constant E";
Blockly.Msg["MATH_CONSTANT_GOLDEN_RATIO_TYPEBLOCK"] = "Constant Golden Ratio (φ)";
Blockly.Msg["MATH_CONSTANT_HELPURL"] = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg["MATH_CONSTANT_INFINITY_TYPEBLOCK"] = "Constant Infinity (∞)";
Blockly.Msg["MATH_CONSTANT_PI_TYPEBLOCK"] = "Constant PI";
Blockly.Msg["MATH_CONSTANT_SQRT1_2_TYPEBLOCK"] = "Constant √ 1/2";
Blockly.Msg["MATH_CONSTANT_SQRT2_TYPEBLOCK"] = "Constant √ 2";
Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "constrain %1 low %2 high %3";
Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "Constrain a number to be between the specified limits (inclusive).";
Blockly.Msg["MATH_CONSTRAIN_TYPEBLOCK"] = "Constrain Number Low High";
Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";
Blockly.Msg["MATH_FORMAT_AS_DECIMAL_TITLE"] = "format as decimal  number %1 places %2";
Blockly.Msg["MATH_FORMAT_AS_DECIMAL_TOOLTIP"] = "Format this number";
Blockly.Msg["MATH_FORMAT_AS_DECIMAL_TYPEBLOCK"] = "Format as Decimal";
Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "is divisible by";
Blockly.Msg["MATH_IS_DIVISIBLE_BY_TYPEBLOCK"] = "Number Is Divisible By";
Blockly.Msg["MATH_IS_EVEN"] = "is even";
Blockly.Msg["MATH_IS_EVEN_TYPEBLOCK"] = "Number Is Even";
Blockly.Msg["MATH_IS_NEGATIVE"] = "is negative";
Blockly.Msg["MATH_IS_NEGATIVE_TYPEBLOCK"] = "Number Is Negative";
Blockly.Msg["MATH_IS_ODD"] = "is odd";
Blockly.Msg["MATH_IS_ODD_TYPEBLOCK"] = "Number Is Odd";
Blockly.Msg["MATH_IS_POSITIVE"] = "is positive";
Blockly.Msg["MATH_IS_POSITIVE_TYPEBLOCK"] = "Number Is Positive";
Blockly.Msg["MATH_IS_PRIME"] = "is prime";
Blockly.Msg["MATH_IS_PRIME_TYPEBLOCK"] = "Number Is Prime";
Blockly.Msg["MATH_IS_TOOLTIP"] = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
Blockly.Msg["MATH_IS_WHOLE"] = "is whole";
Blockly.Msg["MATH_IS_WHOLE_TYPEBLOCK"] = "Number Is Whole";
Blockly.Msg["MATH_MODULO_HELPURL"] = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg["MATH_MODULO_TITLE"] = "remainder of %1 ÷ %2";
Blockly.Msg["MATH_MODULO_TOOLTIP"] = "Return the remainder from dividing the two numbers.";
Blockly.Msg["MATH_MODULO_TYPEBLOCK"] = "Remainder of";
Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";
Blockly.Msg["MATH_NUMBER_HELPURL"] = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "A number.";
Blockly.Msg["MATH_ONLIST_AVERAGE_TYPEBLOCK"] = "Average of List";
Blockly.Msg["MATH_ONLIST_HELPURL"] = "";
Blockly.Msg["MATH_ONLIST_MAX_TYPEBLOCK"] = "Max of List";
Blockly.Msg["MATH_ONLIST_MEDIAN_TYPEBLOCK"] = "Median of List";
Blockly.Msg["MATH_ONLIST_MIN_TYPEBLOCK"] = "Min of List";
Blockly.Msg["MATH_ONLIST_MODE_TYPEBLOCK"] = "Mode of List";
Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "average of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "max of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "median of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "min of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "modes of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "random item of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "standard deviation of list";
Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "sum of list";
Blockly.Msg["MATH_ONLIST_RANDOM_TYPEBLOCK"] = "Random Item of List";
Blockly.Msg["MATH_ONLIST_STD_DEV_TYPEBLOCK"] = "Standard Deviation of List";
Blockly.Msg["MATH_ONLIST_SUM_TYPEBLOCK"] = "Sum of List";
Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Return the average (arithmetic mean) of the numeric values in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "Return the largest number in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Return the median number in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "Return the smallest number in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "Return a list of the most common item(s) in the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "Return a random element from the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Return the standard deviation of the list.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "Return the sum of all the numbers in the list.";
Blockly.Msg["MATH_POWER_SYMBOL"] = "^";
Blockly.Msg["MATH_RANDOM_FLOAT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "random fraction";
Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
Blockly.Msg["MATH_RANDOM_FLOAT_TYPEBLOCK"] = "Random Fraction";
Blockly.Msg["MATH_RANDOM_INT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "random integer from %1 to %2";
Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "Return a random integer between the two specified limits, inclusive.";
Blockly.Msg["MATH_RANDOM_INT_TYPEBLOCK"] = "Random Integer";
Blockly.Msg["MATH_ROUND_HELPURL"] = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "round";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "round down";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "round up";
Blockly.Msg["MATH_ROUND_ROUNDDOWN_TYPEBLOCK"] = "Round Down";
Blockly.Msg["MATH_ROUND_ROUNDUP_TYPEBLOCK"] = "Round Up";
Blockly.Msg["MATH_ROUND_ROUND_TYPEBLOCK"] = "Round";
Blockly.Msg["MATH_ROUND_TOOLTIP"] = "Round a number up or down.";
Blockly.Msg["MATH_SINGLE_HELPURL"] = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "absolute";
Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE_TYPEBLOCK"] = "Absolute Value";
Blockly.Msg["MATH_SINGLE_OP_NEG_TYPEBLOCK"] = "Negation";
Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "square root";
Blockly.Msg["MATH_SINGLE_OP_ROOT_TYPEBLOCK"] = "Square Root";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "Return the absolute value of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "Return e to the power of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "Return the natural logarithm of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "Return the base 10 logarithm of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "Return the negation of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "Return 10 to the power of a number.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "Return the square root of a number.";
Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";
Blockly.Msg["MATH_TRIG_ACOS"] = "acos";
Blockly.Msg["MATH_TRIG_ACOS_TYPEBLOCK"] = "ACOS";
Blockly.Msg["MATH_TRIG_ASIN"] = "asin";
Blockly.Msg["MATH_TRIG_ASIN_TYPEBLOCK"] = "ASIN";
Blockly.Msg["MATH_TRIG_ATAN"] = "atan";
Blockly.Msg["MATH_TRIG_ATAN_TYPEBLOCK"] = "ATAN";
Blockly.Msg["MATH_TRIG_COS"] = "cos";
Blockly.Msg["MATH_TRIG_COS_TYPEBLOCK"] = "COS";
Blockly.Msg["MATH_TRIG_HELPURL"] = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg["MATH_TRIG_SIN"] = "sin";
Blockly.Msg["MATH_TRIG_SIN_TYPEBLOCK"] = "SIN";
Blockly.Msg["MATH_TRIG_TAN"] = "tan";
Blockly.Msg["MATH_TRIG_TAN_TYPEBLOCK"] = "TAN";
Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "Return the arccosine of a number.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "Return the arcsine of a number.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "Return the arctangent of a number.";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "Return the cosine of a degree (not radian).";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "Return the sine of a degree (not radian).";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "Return the tangent of a degree (not radian).";
Blockly.Msg["ME"] = "Me";
Blockly.Msg["NEW_SCOPE_VARIABLE"] = "New Key...";
Blockly.Msg["NEW_SCOPE_VARIABLE_TITLE"] = "New Key name:";
Blockly.Msg["NEW_VARIABLE"] = "New variable...";
Blockly.Msg["NEW_VARIABLE_TITLE"] = "New variable name:";
Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";
Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "allow statements";
Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "with:";
Blockly.Msg["PROCEDURES_CALLNORETURN_CALL"] = "";
Blockly.Msg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Run the user-defined function '%1'.";
Blockly.Msg["PROCEDURES_CALLRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "Run the user-defined function '%1' and use its output.";
Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "with:";
Blockly.Msg["PROCEDURES_CREATE_DO"] = "Create '%1'";
Blockly.Msg["PROCEDURES_DEFFUNCTIONNORETURN_TITLE"] = "Function";
Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";
Blockly.Msg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "do something";
Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "to";
Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Creates a function with no output.";
Blockly.Msg["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "return";
Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "Creates a function with an output.";
Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Warning: This function has duplicate parameters.";
Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "Highlight function definition";
Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "If a value is true, then return a second value.";
Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "Warning: This block may be used only within a function definition.";
Blockly.Msg["PROCEDURES_MUTATORARG_TITLE"] = "input name:";
Blockly.Msg["PROCEDURES_MUTATORARG_TOOLTIP"] = "Add an input to the function.";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TITLE"] = "inputs";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Add, remove, or reorder inputs to this function.";
Blockly.Msg["PROCEDURES_NEWTYPE"] = "New Type...";
Blockly.Msg["PROCEDURES_NEWTYPETITLE"] = "New Type name:";
Blockly.Msg["PROCEDURES_PARAM_NOTYPE"] = "with %1 %2%3";
Blockly.Msg["PROCEDURES_PARAM_WITH_TYPE"] = "with %1 as %2%3%4";
Blockly.Msg["REMOVE_COMMENT"] = "Remove Comment";
Blockly.Msg["RENAME_SCOPE_VARIABLE"] = "Rename Key...";
Blockly.Msg["RENAME_SCOPE_VARIABLE_TITLE"] = "Rename all '%1' Keys to:";
Blockly.Msg["RENAME_VARIABLE"] = "Rename variable...";
Blockly.Msg["RENAME_VARIABLE_TITLE"] = "Rename all '%1' variables to:";
Blockly.Msg["SCOPE_VARIABLES_SET"] = "set %1 : %2 to %3";
Blockly.Msg["TEXT_APPEND_APPENDTEXT"] = "append text";
Blockly.Msg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg["TEXT_APPEND_TO"] = "to";
Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "Append some text to variable '%1'.";
Blockly.Msg["TEXT_APPEND_TYPEBLOCK"] = "Append Text";
Blockly.Msg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg["TEXT_CHANGECASE_LOWERCASE_TYPBLOCK"] = "Text to lower case";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "to lower case";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "to Title Case";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "to UPPER CASE";
Blockly.Msg["TEXT_CHANGECASE_TITLECASE_TYPBLOCK"] = "Text to Title Case";
Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "Return a copy of the text in a different case.";
Blockly.Msg["TEXT_CHANGECASE_UPPERCASE_TYPBLOCK"] = "Text to UPPER CASE";
Blockly.Msg["TEXT_CHARAT_FIRST"] = "In Text Get First Letter";
Blockly.Msg["TEXT_CHARAT_FROM_END"] = "In Text Get Letter # From End";
Blockly.Msg["TEXT_CHARAT_FROM_START"] = "In Text Get Letter #";
Blockly.Msg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg["TEXT_CHARAT_INPUT_INTEXT"] = "in text";
Blockly.Msg["TEXT_CHARAT_LAST"] = "In Text Get Last Letter";
Blockly.Msg["TEXT_CHARAT_RANDOM"] = "In Text Get Random Letter";
Blockly.Msg["TEXT_CHARAT_TAIL"] = "";
Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "Returns the letter at the specified position.";
Blockly.Msg["TEXT_COMMENT_TEXT"] = "Comment:";
Blockly.Msg["TEXT_COMMENT_TYPEBLOCK"] = "Comment";
Blockly.Msg["TEXT_CONTAINS_HELPURL"] = "http://appinventor.mit.edu/explore/ai2/support/blocks/text#contains";
Blockly.Msg["TEXT_CONTAINS_INPUT"] = "contains text %1 piece %2";
Blockly.Msg["TEXT_CONTAINS_TOOLTIP"] = "Tests whether the piece is contained in the text.";
Blockly.Msg["TEXT_CONTAINS_TYPEBLOCK"] = "Text Contains";
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Add an item to the text.";
Blockly.Msg["TEXT_CREATE_JOIN_TITLE_JOIN"] = "join";
Blockly.Msg["TEXT_CREATE_JOIN_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this text block.";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "to letter # from end";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END_TYPEBLOCK"] = " To Letter # From End";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "to letter #";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START_TYPEBLOCK"] = " To Letter #";
Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "to last letter";
Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST_TYPEBLOCK"] = " To Last Letter";
Blockly.Msg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "in text";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "get substring from first letter";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST_TYPEBLOCK"] = "Get Substring From First Letter";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "get substring from letter # from end";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END_TYPEBLOCK"] = "Get Substring From Letter # From End";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "get substring from letter #";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START_TYPEBLOCK"] = "Get Substring From Letter #";
Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";
Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "Returns a specified portion of the text.";
Blockly.Msg["TEXT_INDEXOF_FIRST_TYPEBLOCK"] = "Find First Occurrence of Text";
Blockly.Msg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg["TEXT_INDEXOF_INPUT_INTEXT"] = "in text";
Blockly.Msg["TEXT_INDEXOF_LAST_TYPEBLOCK"] = "Find Last Occurrence of Text";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "find first occurrence of text";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "find last occurrence of text";
Blockly.Msg["TEXT_INDEXOF_TAIL"] = "";
Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "Returns the index of the first/last occurrence of the first text in the second text. Returns 0 if text is not found.";
Blockly.Msg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1 is empty";
Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "Returns true if the provided text is empty.";
Blockly.Msg["TEXT_ISEMPTY_TYPEBLOCK"] = "Text is Empty";
Blockly.Msg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "create text with";
Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "Create a piece of text by joining together any number of items.";
Blockly.Msg["TEXT_JOIN_TYPEBLOCK"] = "Create Text With";
Blockly.Msg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg["TEXT_LENGTH_TITLE"] = "length of %1";
Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "Returns the number of letters (including spaces) in the provided text.";
Blockly.Msg["TEXT_LENGTH_TYPEBLOCK"] = "Length of Text";
Blockly.Msg["TEXT_PRINTF_CREATEWITH"] = "create text with";
Blockly.Msg["TEXT_PRINTF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg["TEXT_PRINTF_TITLE"] = "printf format %1";
Blockly.Msg["TEXT_PRINTF_TOOLTIP"] = "Printf the specified text, number or other value.";
Blockly.Msg["TEXT_PRINTF_TYPEBLOCK"] = "Printf Text";
Blockly.Msg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg["TEXT_PRINT_TITLE"] = "print %1";
Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "Print the specified text, number or other value.";
Blockly.Msg["TEXT_PRINT_TYPEBLOCK"] = "Print Text";
Blockly.Msg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg["TEXT_PROMPT_NUMBER_TYPEBLOCK"] = "Prompt For Number With Message";
Blockly.Msg["TEXT_PROMPT_TEXT_TYPEBLOCK"] = "Prompt For Text With Message";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Prompt for user for a number.";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "Prompt for user for some text.";
Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "prompt for number with message";
Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "prompt for text with message";
Blockly.Msg["TEXT_SPRINTF_CREATEWITH"] = "create text with";
Blockly.Msg["TEXT_SPRINTF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg["TEXT_SPRINTF_TITLE"] = "sprintf format %1";
Blockly.Msg["TEXT_SPRINTF_TOOLTIP"] = "Sprintf the specified text, number or other value.";
Blockly.Msg["TEXT_SPRINTF_TYPEBLOCK"] = "Sprintf Text";
Blockly.Msg["TEXT_TEXT_HELPURL"] = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "A letter, word, or line of text.";
Blockly.Msg["TEXT_TOOLTIP_TYPE_JAVA"] = "Insert arbitrary Java code";
Blockly.Msg["TEXT_TOOLTIP_TYPE_PYTHON"] = "Insert arbitrary Python code";
Blockly.Msg["TEXT_TRIM_BOTH_TYPEBLOCK"] = "Trim Spaces From Both Sides Of Text";
Blockly.Msg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg["TEXT_TRIM_LEFT_TYPEBLOCK"] = "Trim Spaces From Left Side Of Text";
Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "trim spaces from both sides of";
Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "trim spaces from left side of";
Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "trim spaces from right side of";
Blockly.Msg["TEXT_TRIM_RIGHT_TYPEBLOCK"] = "Trim Spaces From Right Side Of Text";
Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "Return a copy of the text with spaces removed from one or both ends.";
Blockly.Msg["TEXT_TYPE_JAVA"] = "insert java code";
Blockly.Msg["TEXT_TYPE_JAVA_TYPEBLOCK"] = "insert java code";
Blockly.Msg["TEXT_TYPE_PYTHON"] = "insert python code";
Blockly.Msg["TEXT_TYPE_PYTHON_TYPEBLOCK"] = "insert python code";
Blockly.Msg["TODAY"] = "Today";
Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "item";
Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "Create 'set %1'";
Blockly.Msg["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";
Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "Returns the value of this variable.";
Blockly.Msg["VARIABLES_SET"] = "set %1 to %2";
Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "Create 'get %1'";
Blockly.Msg["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "Sets this variable to be equal to the input.";
Blockly.Msg["CONTROLS_FOREACH_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_FOR_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"];
Blockly.Msg["CONTROLS_IF_ELSE_TITLE_ELSE"] = Blockly.Msg["CONTROLS_IF_MSG_ELSE"];
Blockly.Msg["CONTROLS_IF_IF_TITLE_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
Blockly.Msg["CONTROLS_IF_MSG_THEN"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_WHILEUNTIL_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TITLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["LISTS_GET_INDEX_HELPURL"] = Blockly.Msg["LISTS_INDEX_OF_HELPURL"];
Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["MAPS_CREATE_WITH_ITEM_TITLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["MAPS_GET_INDEX_HELPURL"] = Blockly.Msg["MAPS_INDEX_OF_HELPURL"];
Blockly.Msg["MAPS_GET_INDEX_INPUT_IN_MAP"] = Blockly.Msg["MAPS_INMAP"];
Blockly.Msg["MAPS_INDEX_OF_INPUT_IN_MAP"] = Blockly.Msg["MAPS_INMAP"];
Blockly.Msg["MAPS_SET_INDEX_INPUT_IN_MAP"] = Blockly.Msg["MAPS_INMAP"];
Blockly.Msg["MATH_CHANGE_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["PROCEDURES_CALLRETURN_CALL"] = Blockly.Msg["PROCEDURES_CALLNORETURN_CALL"];
Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["PROCEDURES_DEFRETURN_TITLE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"];
Blockly.Msg["TEXT_APPEND_VARIABLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
